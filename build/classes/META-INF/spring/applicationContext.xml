<?xml version="1.0" encoding="UTF-8"  ?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xmlns:task="http://www.springframework.org/schema/task"
    xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/task  
        http://www.springframework.org/schema/task/spring-task-3.1.xsd  ">

    <!-- spring的context是父子容器，由ServletContextListener[Web.xml里有两个监听器，一个spring的，一个springmvc的] 
    加载spring配置文件产生的是父容器，
    springMVC加载配置文件产生的是子容器，
    子容器对Controller进行扫描装配时装配了@Service注解的实例 (@Controller 实例依赖@Service实例)，
    而该实例理应由父容器进行初始化以保证事务的增强处理，
    所以此时得到的将是原样的Service（没有经过事务加强处理，故而没有事务处理能力。 -->
	<context:component-scan base-package="com.jpa">     
      <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>     
    </context:component-scan>   
    
    

    <!-- 当 Spring 容器启动时，AutowiredAnnotationBeanPostProcessor 将扫描 Spring 容器中所有 
        Bean，当发现 Bean 中拥有@Autowired 注释时就找到和其匹配（默认按类型匹配）的 Bean，并注入到对应的地方中去。 -->
    <bean
        class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
  
  
     <!-- Spring Data Jpa配置 -->
     
    <!-- 引入properties文件 -->
    <bean id="configProperties"
        class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath*:META-INF/spring/*.properties</value>
            </list>
        </property>
    </bean>
    
    <bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer" >
        <property name="properties" ref="configProperties"></property>
    </bean>
    
     <!-- 数据源 -->
 <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"  
        init-method="init" destroy-method="close">
        <property name="driverClassName" value="${database.driverClassName}" />
        <property name="url" value="${database.url}" />
        <property name="username" value="${database.username}" />
        <property name="password" value="${database.password}" />
        <!-- 连接池最大使用连接数量 -->  
        <property name="maxActive" value="20" />  
        <!-- 初始化大小 -->  
        <property name="initialSize" value="5" />  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="60000" />  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="2" />  
        <!-- 逐出连接的检测时间间隔 -->  
        <property name="timeBetweenEvictionRunsMillis" value="3000" />  
        <!-- 最小逐出时间 -->  
        <property name="minEvictableIdleTimeMillis" value="300000" />  
        <!-- 测试有效用的SQL Query -->  
        <property name="validationQuery" value="SELECT 'x'" />  
        <!-- 连接空闲时测试是否有效 -->  
        <property name="testWhileIdle" value="true" />  
        <!-- 获取连接时测试是否有效 -->  
        <property name="testOnBorrow" value="false" />  
        <!-- 归还连接时是否测试有效 -->  
        <property name="testOnReturn" value="false" /> 
    </bean>
     
     <!-- JPA实体管理工厂的配置 -->
    <bean
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
        id="entityManagerFactory">
        <property name="persistenceUnitName" value="persistenceUnit" />
        <property name="dataSource" ref="dataSource" />
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter" />
    </bean>
    
    <jpa:repositories base-package="com.jpa.repository" entity-manager-factory-ref="entityManagerFactory"></jpa:repositories>
    
     <!-- 注释有效 -->  
 <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"></bean>  
 
	<!--jpaVendorAdapter:指定实现JPA的适配器 -->
    <bean id="jpaVendorAdapter"
        class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="showSql" value="true" />
        <property name="database" value="${database}" />
        <property name="databasePlatform" value="org.hibernate.dialect.MySQL5InnoDBDialect" />
    </bean>
    
  <!-- 定义JPA事务 -->  
 <!-- 如果此处事务失效原因查看：http://blog.csdn.net/z69183787/article/details/37819627 -->
  <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager" >
    <property name="entityManagerFactory" ref="entityManagerFactory"></property>  
 </bean> 
	
	<aop:aspectj-autoproxy/>
	<aop:config proxy-target-class="true">
		<!-- 返回任何类型值的 com.jpa.service下的所有类的所有方法【任意参数】 -->
		<aop:pointcut id="serviceMethod" expression="execution(* com.jpa.service.*.*(..))"/>
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice"/>
	</aop:config>
	
	<tx:annotation-driven/>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 由着些关键字开头的service层方法才会被开启事物，如果你不想以这些关键字开头，又要开启事物，请在service层方法上面加上@Transactional注解 -->
			<tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<!-- read repeatable:开启一个事务,读一个数据,而后再次读,这2次读的数据是一致的(行级锁且是锁间隙);
				    read committed:开启一个事务,读一个数据,而后再次读,这2次可能不一样的,因为在这2次
                    读之间可能有其他事务更改这个数据,这也就是读提交,每次读到的数据都是已经提交的(行级锁,不锁间隙)
			 -->
			<tx:method name="*Amount" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="REPEATABLE_READ"/>
			<tx:method name="find*"   read-only="true"/>
			<tx:method name="*" 	  propagation="NOT_SUPPORTED"/>
		</tx:attributes>
	</tx:advice>
</beans>
